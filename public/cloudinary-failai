<!DOCTYPE html>
<html lang="lt">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fail≈≥ Valdymas - Rubineta</title>
    <script src="https://upload-widget.cloudinary.com/global/all.js" type="text/javascript"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .nav {
            background: #34495e;
            padding: 15px;
            display: flex;
            justify-content: center;
            gap: 20px;
            flex-wrap: wrap;
        }
        
        .nav-btn {
            background: transparent;
            color: white;
            border: 2px solid #3498db;
            padding: 10px 20px;
            border-radius: 25px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
        }
        
        .nav-btn.active {
            background: #3498db;
        }
        
        .nav-btn:hover {
            background: #3498db;
            transform: translateY(-2px);
        }
        
        .content {
            padding: 40px;
        }
        
        .page {
            display: none;
        }
        
        .page.active {
            display: block;
        }
        
        .upload-section {
            background: #f8f9fa;
            padding: 30px;
            border-radius: 10px;
            margin-bottom: 30px;
            text-align: center;
        }
        
        .btn {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s;
            text-decoration: none;
            display: inline-block;
        }
        
        .btn:hover {
            transform: translateY(-2px);
        }
        
        .btn-success {
            background: linear-gradient(135deg, #27ae60, #229954);
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
        }
        
        .message {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
        }
        
        .stat-number {
            font-size: 2em;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .files-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }
        
        .file-card {
            border: 1px solid #e1e8ed;
            border-radius: 10px;
            padding: 20px;
            background: white;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .file-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }
        
        .file-preview {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 8px;
            margin-bottom: 15px;
            background: #f8f9fa;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3em;
        }
        
        .file-preview img {
            max-width: 100%;
            max-height: 100%;
            border-radius: 8px;
        }
        
        .file-name {
            font-weight: bold;
            margin-bottom: 10px;
            word-break: break-word;
        }
        
        .file-description {
            color: #666;
            margin-bottom: 15px;
            font-size: 0.9em;
        }
        
        .file-meta {
            font-size: 0.8em;
            color: #888;
            margin-bottom: 15px;
        }
        
        .file-actions {
            display: flex;
            gap: 10px;
        }
        
        .file-actions .btn {
            flex: 1;
            padding: 8px 15px;
            font-size: 0.9em;
        }
        
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
            grid-column: 1 / -1;
        }
        
        .file-info {
            background: #e8f4fd;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }
        
        .uploaded-files {
            margin-top: 20px;
        }
        
        .uploaded-file-item {
            background: #e8f5e8;
            padding: 10px 15px;
            border-radius: 5px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .form-group {
            margin-bottom: 20px;
            text-align: left;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }
        
        input[type="text"],
        select,
        textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e8ed;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        
        input[type="text"]:focus,
        select:focus,
        textarea:focus {
            outline: none;
            border-color: #3498db;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚òÅÔ∏è Fail≈≥ Valdymas - Rubineta</h1>
            <p>Integracija su Cloudinary ir serveriu</p>
        </div>
        
        <div class="nav">
            <button class="nav-btn active" onclick="showPage('admin')">üè† Admin Valdymas</button>
            <button class="nav-btn" onclick="showPage('upload')">üì§ ƒÆkelti Failus</button>
            <button class="nav-btn" onclick="showPage('files')">üìÇ Visi Failai</button>
            <button class="nav-btn" onclick="showPage('email')">üìß Testuoti El. Pa≈°tƒÖ</button>
        </div>
        
        <div class="content">
            <!-- Admin Valdymo Puslapis -->
            <div id="admin-page" class="page active">
                <h2>üè† Admin Valdymo Skydas</h2>
                <div class="stats" id="stats-container">
                    <!-- Stats will be loaded by JavaScript -->
                </div>
                
                <div class="recent-files">
                    <h3>üìã Naujausi Failai Cloudinary</h3>
                    <div id="recent-files" class="files-grid">
                        <div class="loading">‚è≥ Kraunami failai...</div>
                    </div>
                </div>
            </div>
            
            <!-- Fail≈≥ ƒÆkƒólimo Puslapis -->
            <div id="upload-page" class="page">
                <h2>üì§ ƒÆkelti Failus ƒØ Cloudinary</h2>
                
                <div id="upload-message"></div>
                
                <div class="upload-section">
                    <h3>Cloudinary Fail≈≥ ƒÆkƒólimas</h3>
                    <p>Paspauskite mygtukƒÖ ≈æemiau norƒódami ƒØkelti failus ƒØ Cloudinary</p>
                    <button id="cloudinary-upload-btn" class="btn btn-success" style="margin: 20px 0;">
                        üöÄ Atidaryti Cloudinary Uploader
                    </button>
                </div>
                
                <div id="upload-results" class="uploaded-files">
                    <!-- ƒåia bus rodomi ƒØkelti failai -->
                </div>
            </div>
            
            <!-- Vis≈≥ Fail≈≥ Per≈æi≈´ros Puslapis -->
            <div id="files-page" class="page">
                <h2>üìÇ Visi Failai Cloudinary</h2>
                
                <div class="file-actions" style="margin-bottom: 20px;">
                    <button class="btn" onclick="loadAllFiles()">üîÑ Atnaujinti SƒÖra≈°ƒÖ</button>
                </div>
                
                <div id="all-files" class="files-grid">
                    <div class="loading">‚è≥ Kraunami failai...</div>
                </div>
            </div>
            
            <!-- El. Pa≈°to Testavimo Puslapis -->
            <div id="email-page" class="page">
                <h2>üìß Testuoti El. Pa≈°to SiuntimƒÖ</h2>
                
                <div class="upload-section">
                    <h3>Testuokite j≈´s≈≥ serverio el. pa≈°to funkcijas</h3>
                    
                    <div class="form-group">
                        <label for="test-email">Gavƒójo el. pa≈°tas:</label>
                        <input type="email" id="test-email" placeholder="gavƒójas@example.com">
                    </div>
                    
                    <div class="form-group">
                        <label for="test-claim-id">Pretenzijos ID:</label>
                        <input type="text" id="test-claim-id" placeholder="PTZ-12345">
                    </div>
                    
                    <div class="form-group">
                        <label for="test-email-type">El. pa≈°to tipas:</label>
                        <select id="test-email-type">
                            <option value="password-reset">Slapta≈æod≈æio atk≈´rimas</option>
                            <option value="confirmation">Pretenzijos patvirtinimas</option>
                            <option value="partner">Prane≈°imas meistrui</option>
                            <option value="quality">Prane≈°imas kokybƒós skyriui</option>
                            <option value="feedback">Apklausos siuntimas</option>
                            <option value="resolved">Prane≈°imas apie i≈°sprƒôstƒÖ pretenzijƒÖ</option>
                            <option value="status-change">B≈´senos pakeitimas</option>
                        </select>
                    </div>
                    
                    <button class="btn" onclick="testEmail()">üìß I≈°si≈≥sti TestinƒØ Lai≈°kƒÖ</button>
                </div>
                
                <div id="email-results"></div>
            </div>
        </div>
    </div>

    <script>
        // Cloudinary konfig≈´racija
        const CLOUDINARY_CONFIG = {
            cloudName: 'j≈´s≈≥-cloud-name', // Pakeiskite savo Cloudinary cloud name
            uploadPreset: 'j≈´s≈≥-upload-preset', // Pakeiskite savo upload preset
        };

        // Serverio endpoint'ai
        const SERVER_ENDPOINTS = {
            base: 'https://pretenzijos-sistema.onrender.com',
            files: '/api/cloudinary-files',
            email: {
                passwordReset: '/send-password-reset',
                confirmation: '/send-confirmation',
                partner: '/send-to-partner',
                quality: '/notify-quality',
                feedback: '/send-feedback-survey',
                resolved: '/notify-resolved',
                statusChange: '/notify-status-change'
            }
        };

        // Globalus kintamieji
        let cloudinaryFiles = JSON.parse(localStorage.getItem('cloudinaryFiles')) || [];
        let cloudinaryWidget = null;

        // Puslapio rodymo funkcija
        function showPage(pageId) {
            document.querySelectorAll('.page').forEach(page => {
                page.classList.remove('active');
            });
            
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            document.getElementById(pageId + '-page').classList.add('active');
            event.target.classList.add('active');
            
            if (pageId === 'admin') {
                loadAdminStats();
                loadRecentFiles();
            } else if (pageId === 'files') {
                loadAllFiles();
            }
        }

        // Cloudinary Upload Widget inicializavimas
        function initCloudinaryWidget() {
            if (cloudinaryWidget) {
                cloudinaryWidget.open();
                return;
            }

            cloudinaryWidget = cloudinary.createUploadWidget({
                cloudName: CLOUDINARY_CONFIG.cloudName,
                uploadPreset: CLOUDINARY_CONFIG.uploadPreset,
                sources: ['local', 'url', 'camera'],
                multiple: true,
                defaultSource: 'local',
                styles: {
                    palette: {
                        window: "#FFFFFF",
                        sourceBg: "#F4F4F5",
                        windowBorder: "#90a0b3",
                        tabIcon: "#000000",
                        inactiveTabIcon: "#555a5f",
                        menuIcons: "#5d6165",
                        link: "#3498db",
                        action: "#3498db",
                        inProgress: "#3498db",
                        complete: "#27ae60",
                        error: "#e74c3c",
                        textDark: "#000000",
                        textLight: "#FFFFFF"
                    }
                }
            }, (error, result) => {
                if (!error && result && result.event === "success") {
                    handleUploadSuccess(result.info);
                } else if (error) {
                    showMessage('‚ùå ƒÆkƒólimo klaida: ' + error.message, 'error', 'upload-message');
                }
            });
        }

        // Sƒókmingo ƒØkƒólimo apdorojimas
        function handleUploadSuccess(fileInfo) {
            const fileData = {
                id: fileInfo.public_id,
                url: fileInfo.secure_url,
                originalName: fileInfo.original_filename,
                format: fileInfo.format,
                size: fileInfo.bytes,
                width: fileInfo.width,
                height: fileInfo.height,
                uploadedAt: new Date().toISOString(),
                resourceType: fileInfo.resource_type
            };
            
            // ƒÆdedame ƒØ masyvƒÖ
            cloudinaryFiles.unshift(fileData);
            
            // I≈°saugome localStorage
            localStorage.setItem('cloudinaryFiles', JSON.stringify(cloudinaryFiles));
            
            // Siunƒçiame ƒØ serverƒØ
            sendFileToServer(fileData);
            
            // Rodyti sƒókmƒós prane≈°imƒÖ
            showUploadResult(fileData);
            
            // Atnaujinti admin puslapƒØ
            loadAdminStats();
            loadRecentFiles();
        }

        // Si≈≥sti failo duomenis ƒØ serverƒØ
        async function sendFileToServer(fileData) {
            try {
                const response = await fetch(SERVER_ENDPOINTS.base + SERVER_ENDPOINTS.files, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(fileData)
                });

                if (response.ok) {
                    console.log('‚úÖ Failo duomenys sƒókmingai i≈°saugoti serveryje');
                } else {
                    console.warn('‚ö†Ô∏è Nepavyko i≈°saugoti failo duomen≈≥ serveryje');
                }
            } catch (error) {
                console.error('‚ùå Klaida siunƒçiant failo duomenis ƒØ serverƒØ:', error);
            }
        }

        // Rodyti ƒØkƒólimo rezultatƒÖ
        function showUploadResult(fileData) {
            const resultsContainer = document.getElementById('upload-results');
            const fileElement = document.createElement('div');
            fileElement.className = 'uploaded-file-item';
            
            const fileIcon = getFileIcon(fileData.resourceType, fileData.format);
            const fileSize = formatFileSize(fileData.size);
            
            fileElement.innerHTML = `
                <div style="flex: 1;">
                    <strong>${fileIcon} ${escapeHtml(fileData.originalName)}</strong>
                    <div style="font-size: 0.8em; color: #666;">
                        Dydis: ${fileSize} | Formatas: ${fileData.format} | ID: ${fileData.id}
                    </div>
                </div>
                <button class="btn" onclick="viewFile('${fileData.id}')" style="margin-left: 10px;">
                    Per≈æi≈´rƒóti
                </button>
            `;
            
            resultsContainer.appendChild(fileElement);
            showMessage('‚úÖ Failas sƒókmingai ƒØkeltas ƒØ Cloudinary!', 'success', 'upload-message');
        }

        // Failo per≈æi≈´ra
        function viewFile(fileId) {
            const file = cloudinaryFiles.find(f => f.id === fileId);
            if (file) {
                window.open(file.url, '_blank');
            }
        }

        // Failo ≈°alinimas
        function deleteFile(fileId) {
            if (!confirm('Ar tikrai norite pa≈°alinti ≈°ƒØ failƒÖ i≈° sƒÖra≈°o?')) {
                return;
            }
            
            cloudinaryFiles = cloudinaryFiles.filter(f => f.id !== fileId);
            localStorage.setItem('cloudinaryFiles', JSON.stringify(cloudinaryFiles));
            
            // Perkrauti rodymƒÖ
            loadAdminStats();
            loadRecentFiles();
            loadAllFiles();
            
            showMessage('‚úÖ Failo nuoroda sƒókmingai pa≈°alinta!', 'success', 'upload-message');
        }

        // Failo ikonos gavimas
        function getFileIcon(resourceType, format) {
            if (resourceType === 'image') {
                return 'üñºÔ∏è';
            } else if (resourceType === 'video') {
                return 'üé¨';
            } else if (resourceType === 'raw') {
                if (format === 'pdf') return 'üìï';
                if (['doc', 'docx'].includes(format)) return 'üìù';
                if (['xls', 'xlsx'].includes(format)) return 'üìä';
                if (['zip', 'rar'].includes(format)) return 'üì¶';
                return 'üìÑ';
            }
            return 'üìÑ';
        }

        // Failo dyd≈æio formatavimas
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 B';
            const k = 1024;
            const sizes = ['B', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // ≈Ωinutƒós rodymo funkcija
        function showMessage(text, type, containerId) {
            const container = document.getElementById(containerId);
            container.innerHTML = `<div class="message ${type}">${text}</div>`;
            setTimeout(() => {
                container.innerHTML = '';
            }, 5000);
        }

        // Admin statistikos ƒØkƒólimas
        function loadAdminStats() {
            const statsContainer = document.getElementById('stats-container');
            const totalSize = cloudinaryFiles.reduce((sum, file) => sum + file.size, 0);
            const imagesCount = cloudinaryFiles.filter(f => f.resourceType === 'image').length;
            const videosCount = cloudinaryFiles.filter(f => f.resourceType === 'video').length;
            const documentsCount = cloudinaryFiles.filter(f => f.resourceType === 'raw').length;
            
            statsContainer.innerHTML = `
                <div class="stat-card">
                    <div class="stat-number">${cloudinaryFiles.length}</div>
                    <div>I≈° viso fail≈≥</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${formatFileSize(totalSize)}</div>
                    <div>Bendras dydis</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${imagesCount}</div>
                    <div>Nuotraukos</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${documentsCount + videosCount}</div>
                    <div>Kiti failai</div>
                </div>
            `;
        }

        // Paskutini≈≥ fail≈≥ ƒØkƒólimas
        function loadRecentFiles() {
            const recentContainer = document.getElementById('recent-files');
            const recentFiles = [...cloudinaryFiles].sort((a, b) => 
                new Date(b.uploadedAt) - new Date(a.uploadedAt)
            ).slice(0, 6);
            
            if (recentFiles.length === 0) {
                recentContainer.innerHTML = `
                    <div class="empty-state">
                        <div class="icon">üìÅ</div>
                        <h2>Fail≈≥ nerasta</h2>
                        <p>Dar nebuvo ƒØkelta joki≈≥ fail≈≥ ƒØ Cloudinary.</p>
                        <button class="btn" onclick="showPage('upload')" style="margin-top: 20px;">
                            ƒÆkelti pirmƒÖ failƒÖ
                        </button>
                    </div>
                `;
                return;
            }
            
            recentContainer.innerHTML = recentFiles.map(file => `
                <div class="file-card">
                    <div class="file-preview">
                        ${file.resourceType === 'image' ? 
                            `<img src="${file.url}" alt="${escapeHtml(file.originalName)}" loading="lazy">` : 
                            `<div>${getFileIcon(file.resourceType, file.format)}</div>`
                        }
                    </div>
                    
                    <div class="file-name">
                        ${escapeHtml(file.originalName)}
                    </div>
                    
                    <div class="file-meta">
                        <div><strong>Dydis:</strong> ${formatFileSize(file.size)}</div>
                        <div><strong>Tipas:</strong> ${file.resourceType}</div>
                        <div><strong>ƒÆkelta:</strong> ${new Date(file.uploadedAt).toLocaleDateString('lt-LT')}</div>
                    </div>
                    
                    <div class="file-actions">
                        <button class="btn" onclick="viewFile('${file.id}')">
                            üëÅÔ∏è Per≈æi≈´rƒóti
                        </button>
                        
                        <button class="btn btn-danger" onclick="deleteFile('${file.id}')">
                            üóëÔ∏è Trinti
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Vis≈≥ fail≈≥ ƒØkƒólimas
        function loadAllFiles() {
            const allFilesContainer = document.getElementById('all-files');
            
            if (cloudinaryFiles.length === 0) {
                allFilesContainer.innerHTML = `
                    <div class="empty-state">
                        <div class="icon">üìÅ</div>
                        <h2>Fail≈≥ nerasta</h2>
                        <p>Dar nebuvo ƒØkelta joki≈≥ fail≈≥.</p>
                        <button class="btn" onclick="showPage('upload')" style="margin-top: 20px;">
                            ƒÆkelti pirmƒÖ failƒÖ
                        </button>
                    </div>
                `;
                return;
            }
            
            const sortedFiles = [...cloudinaryFiles].sort((a, b) => new Date(b.uploadedAt) - new Date(a.uploadedAt));
            
            allFilesContainer.innerHTML = sortedFiles.map(file => `
                <div class="file-card">
                    <div class="file-preview">
                        ${file.resourceType === 'image' ? 
                            `<img src="${file.url}" alt="${escapeHtml(file.originalName)}" loading="lazy">` : 
                            `<div>${getFileIcon(file.resourceType, file.format)}</div>`
                        }
                    </div>
                    
                    <div class="file-name">
                        ${escapeHtml(file.originalName)}
                    </div>
                    
                    <div class="file-meta">
                        <div><strong>Originalus pavadinimas:</strong> ${escapeHtml(file.originalName)}</div>
                        <div><strong>Tipas:</strong> ${file.resourceType || 'Ne≈æinomas'}</div>
                        <div><strong>Dydis:</strong> ${formatFileSize(file.size)}</div>
                        <div><strong>ƒÆkelta:</strong> ${new Date(file.uploadedAt).toLocaleString('lt-LT')}</div>
                    </div>
                    
                    <div class="file-actions">
                        <button class="btn" onclick="viewFile('${file.id}')">
                            üëÅÔ∏è Per≈æi≈´rƒóti
                        </button>
                        
                        <button class="btn btn-danger" onclick="deleteFile('${file.id}')">
                            üóëÔ∏è Trinti
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // El. pa≈°to testavimas
        async function testEmail() {
            const email = document.getElementById('test-email').value;
            const claimId = document.getElementById('test-claim-id').value;
            const emailType = document.getElementById('test-email-type').value;
            const resultsContainer = document.getElementById('email-results');
            
            if (!email || !claimId) {
                showMessage('‚ùå ƒÆveskite el. pa≈°tƒÖ ir pretenzijos ID', 'error', 'email-results');
                return;
            }
            
            let endpoint = '';
            let payload = {};
            
            switch (emailType) {
                case 'password-reset':
                    endpoint = SERVER_ENDPOINTS.email.passwordReset;
                    payload = { 
                        email: email, 
                        resetLink: 'https://pretenzijos-sistema.onrender.com/reset-password?token=test' 
                    };
                    break;
                    
                case 'confirmation':
                    endpoint = SERVER_ENDPOINTS.email.confirmation;
                    payload = { 
                        email: email, 
                        claimId: claimId,
                        language: 'lt',
                        isRegistered: true
                    };
                    break;
                    
                case 'partner':
                    endpoint = SERVER_ENDPOINTS.email.partner;
                    payload = {
                        claimId: claimId,
                        partnerEmail: email,
                        partnerContactPerson: 'Testinis Meistras',
                        note: 'Testinƒó pastaba',
                        claimLink: 'https://pretenzijos-sistema.onrender.com/claim-view.html?id=' + claimId,
                        customer: {
                            name: 'Testas',
                            surname: 'Testauskas',
                            phone: '+37061234567',
                            email: email,
                            street: 'Testo g. 1',
                            city: 'Vilnius',
                            postal: '01111'
                        }
                    };
                    break;
                    
                case 'quality':
                    endpoint = SERVER_ENDPOINTS.email.quality;
                    payload = { claimId: claimId };
                    break;
                    
                case 'feedback':
                    endpoint = SERVER_ENDPOINTS.email.feedback;
                    payload = { 
                        email: email, 
                        claimId: claimId,
                        feedbackLink: 'https://pretenzijos-sistema.onrender.com/feedback?claim=' + claimId
                    };
                    break;
                    
                case 'resolved':
                    endpoint = SERVER_ENDPOINTS.email.resolved;
                    payload = {
                        claimId: claimId,
                        customerEmail: email,
                        customerName: 'Testas Testauskas',
                        productName: 'Testinis produktas'
                    };
                    break;
                    
                case 'status-change':
                    endpoint = SERVER_ENDPOINTS.email.statusChange;
                    payload = {
                        claimId: claimId,
                        customerEmail: email,
                        customerName: 'Testas Testauskas',
                        status: 'Perduota servisui'
                    };
                    break;
            }
            
            try {
                const response = await fetch(SERVER_ENDPOINTS.base + endpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(payload)
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    showMessage('‚úÖ El. lai≈°kas sƒókmingai i≈°si≈≥stas!', 'success', 'email-results');
                } else {
                    showMessage('‚ùå Klaida: ' + (result.error || 'Ne≈æinoma klaida'), 'error', 'email-results');
                }
            } catch (error) {
                showMessage('‚ùå Tinklo klaida: ' + error.message, 'error', 'email-results');
            }
        }

        // HTML escaping saugumui
        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // Inicializacija
        document.addEventListener('DOMContentLoaded', function() {
            // Cloudinary mygtuko event listener
            document.getElementById('cloudinary-upload-btn').addEventListener('click', initCloudinaryWidget);
            
            // Pradinis fail≈≥ ƒØkƒólimas
            loadAdminStats();
            loadRecentFiles();
        });
    </script>
</body>
</html>
